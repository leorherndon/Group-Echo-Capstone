from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from models import Registration, Section
from database import SessionLocal
from pydantic import BaseModel

router = APIRouter()

class RegisterRequest(BaseModel):
    student_id: int
    section_id: int

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.post("/register")
def register_course(data: RegisterRequest, db: Session = Depends(get_db)):
    section = db.query(Section).filter_by(section_id=data.section_id).first()
    if not section:
        raise HTTPException(status_code=404, detail="Section not found.")
    enrolled_count = db.query(Registration).filter_by(section_id=section.section_id, status='enrolled').count()
    if enrolled_count >= section.capacity:
        raise HTTPException(status_code=400, detail="No available seats.")
    reg = Registration(student_id=data.student_id, section_id=data.section_id, status='enrolled')
    db.add(reg)
    db.commit()
    db.refresh(reg)
    return {"message": "Registered successfully."}

@router.post("/deregister")
def deregister_course(data: RegisterRequest, db: Session = Depends(get_db)):
    reg = db.query(Registration).filter_by(student_id=data.student_id, section_id=data.section_id, status='enrolled').first()
    if not reg:
        raise HTTPException(status_code=404, detail="Registration not found.")
    reg.status = 'dropped'
    db.commit()
    return {"message": "Deregistered successfully."}
